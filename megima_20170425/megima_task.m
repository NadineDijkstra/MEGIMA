function megima_task(P)%   megima_task(P)%%   Cued recall orientation discrimination task (after Harrison & Tong%   (2009). Nature)%%   P:    Struct containing various parameters%%   Written by SEB in FEB 2017, adapted by Nadine Dijkstra APR 2017%% Start bitsi_scannerif P.situation == 1 || P.situation == 2 % BEH || MEG    BitsiBB = bitsi_scanner('com1'); %/dev/ttyS1');elseif P.situation == 2 % MRI    BitsiBB = bitsi_scanner('com1'); %'/dev/ttyS1');    BitsiScanner = bitsi_scanner('com3'); %/dev/ttyS2');end%% Initialize PTB[wPtr, rect] = Screen('OpenWindow', P.screen, P.backgroundColour, P.resolution);[xCenter, yCenter] = RectCenter(rect);% if P.windows, P.fontSize = round(P.fontSize * 72/96); end % fix the Mac/windows font size problemScreen('TextStyle', wPtr, 1)Screen('Preference', 'DefaultFontSize', P.fontSize);Screen('Preference', 'DefaultFontName', P.fontName);Screen('TextSize', wPtr, P.fontSize);Screen('TextFont', wPtr, P.fontName);%enabledKeys = [KbName('ESCAPE'), KbName(P.leftKey), KbName(P.rightKey), KbName('5%'), KbName(P.keys)]; % escape key for interrruption, 5 for scanner trigger%RestrictKeysForKbCheck(enabledKeys); % this speeds up KbCheckif P.situation ~= 0 && ~isempty(P.calibrationFile)    hardwareCLUT = Screen('LoadCLUT', wPtr);    Screen('LoadCLUT', wPtr, P.CLUT); % Loads gamma-corrected CLUTendScreen('BlendFunction', wPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);HideCursor;refreshDur = Screen('GetFlipInterval',wPtr);slack = refreshDur / 2;%% Create fixation crossfixDiam = ceil(P.fixRadiusInDegree*P.pixPerDeg);fixRect = [0 0 fixDiam fixDiam];fixBgd = zeros(fixDiam,fixDiam,2);fixTexture = Screen('MakeTexture', wPtr, fixBgd);elDiam = floor(fixDiam/3);Screen('FillArc',fixTexture,1,CenterRect([0 0 elDiam elDiam],fixRect),0,360);Screen('FrameArc',fixTexture,1,CenterRect([0 0 fixDiam fixDiam],fixRect),0,360,elDiam/2,elDiam/2);%% Create cuecueTexture = Screen('MakeTexture', wPtr, fixBgd);Screen('FillArc',cueTexture,1,CenterRect([0 0 fixDiam fixDiam],fixRect),0,360);%% Create stimstimRect = [0 0 P.stimSizeInPix(1) P.stimSizeInPix(2)];stim = zeros(P.nStimuli,1);images = str2fullfile('stimuli','*.png');for i = 1:P.nStimuli    image = imread(images{i},'BackgroundColor',[P.backgroundColour/256,P.backgroundColour/256,P.backgroundColour/256]);    stim(i,1) = Screen('MakeTexture',wPtr,image);end%% Create probe locationsProbLoc(1,:) = CenterRectOnPointd(stimRect, xCenter-225, yCenter);ProbLoc(2,:) = CenterRectOnPointd(stimRect, xCenter-75, yCenter);ProbLoc(3,:) = CenterRectOnPointd(stimRect, xCenter+75, yCenter);ProbLoc(4,:) = CenterRectOnPointd(stimRect, xCenter+225, yCenter);%% Create vividness ratingconfRect = [0 0  P.lineLengthPix P.lineLengthPix];lineImg = makeLine(P.lineLengthPix, P.lineLengthPix, P.lineDiamPix);%, ceil(sqrt((fixDiam)^2+(fixDiam)^2)/2)); % at this point the lineImg is still an inverse, i.e. member pixels are 1lineImg = cat(3, ones(size(lineImg))*P.backgroundColour*(1-P.matchContrast), lineImg*255); % alpha layer with member pixels opaque, revealing a uniform luminance layer with brightness defined by matchContrastconfTexture = Screen('MakeTexture', wPtr, lineImg);sliderRect = [0 0 P.sliderLengthPix P.sliderLengthPix];lineImg = makeLine(P.sliderLengthPix, P.sliderLengthPix, P.lineDiamPix)';%, ceil(sqrt((fixDiam)^2+(fixDiam)^2)/2)); % at this point the lineImg is still an inverse, i.e. member pixels are 1lineImg = cat(3, ones(size(lineImg))*P.backgroundColour*(1-P.matchContrast), lineImg*255); % alpha layer with member pixels opaque, revealing a uniform luminance layer with brightness defined by matchContrastsliderTexture = Screen('MakeTexture', wPtr, lineImg);%% Standby screenif P.situation ~= 3 % debug, BEH, MEG    % Emulate scanner    if P.session == 1        message = 'The experiment consists of 10 blocks of ~6 minutes each, with breaks in between. \n It is important that you move as little as possible during the task. \n Now try to find a comfortable position in which you can remain still. \n After breaks the researcher will instruct you back to your original position. \n \n Remember, your task is to imagine the pictures as vividly as possible. \n \n If you have any questions, you can now ask the researcher. \n \n [When you are ready, press the left key to start]';    % Trigger string    else        message = sprintf('This is block %d of 10 \n Let the reseacher know when you are ready to continue. \n She will then instruct you back to your original head position. \n [When you are ready, press the left key to continue with the experiment]',P.session);     endelse % MRI    message = 'Stand by for scan';    % Trigger stringendScreen('FillRect', wPtr, P.backgroundColour, rect);DrawFormattedText(wPtr, message, 'center', 'center', [255 255 255], [], [], [], 1.5);Screen('Flip', wPtr);%% Wait for start of experimentif P.situation == 0 % debug    KbWait(-3,2);elseif P.situation == 1 || P.situation == 2 % BEH || MEG    BitsiBB.clearResponses();    firstButtonPress = 0;    while firstButtonPress == 0        while BitsiBB.numberOfResponses() == 0            WaitSecs(0.001);        end        [resp] = BitsiBB.getResponse(0.001, true);        if resp == P.leftKey            firstButtonPress = 1;        end    endelseif P.situation == 3 % MRI    BitsiScanner.clearResponses();    firstScan = 0;    while firstScan == 0        while BitsiScanner.numberOfResponses() == 0            WaitSecs(0.001);        end        [resp] = BitsiScanner.getResponse(0.001, true);        if resp == P.leftKey            firstScan = 1;        end    endend% define start of the experimentT.startTime = GetSecs;%% Fixation block before start of runif P.fix > 0;    Screen('FillRect', wPtr, P.backgroundColour, rect);    Screen('DrawTexture', wPtr, fixTexture, fixRect, CenterRect(fixRect, rect));    Screen('Flip', wPtr);    WaitSecs(P.fix-2*slack);end%% Timing calculationflipmisscount = 0;T.timings = zeros(P.nTrialsPerRun,13);T.realtimings = zeros(P.nTrialsPerRun,13);trialOnset = 1;imageOnset1 = 2;imageOffset1 = 3;imageOnset2 = 4;imageOffset2 = 5;maskOnset  = 6;maskOffset = 7;retrocueOnset = 8;imageryOnset = 9;confOnset = 10;confOffset = 11;probeOnset = 12;probeOffset = 13;%% Some initiation of variables triggers = zeros(3000,2);triggerCount = 1;B = zeros(P.nTrialsPerRun,6); % behavioural dataresponseConf = 1;confReverse = 2; % scale reversed?confStartTime = 3;confEndTime = 4;trialResponse = 5;trialRT = 6;%% Start trialsfor iTrial = 1:P.nTrialsPerRun        %% Determine timings    if iTrial == 1        T.timings(iTrial,trialOnset) = T.startTime + P.fix;    else        T.timings(iTrial,trialOnset) = T.timings(iTrial-1,probeOffset) + (P.ITIrange(1) + (P.ITIrange(2)-P.ITIrange(1)).*rand(1));    end        T.timings(iTrial,imageOnset1) = T.timings(iTrial,trialOnset) + P.preCueDur + P.cueDur + P.postCueDur;    T.timings(iTrial,imageOffset1) = T.timings(iTrial,imageOnset1) + P.stimDur;    T.timings(iTrial,imageOnset2) = T.timings(iTrial,imageOffset1) + (P.ISIrange(1) + (P.ISIrange(2)-P.ISIrange(1)).*rand(1));    T.timings(iTrial,imageOffset2) = T.timings(iTrial,imageOnset2) + P.stimDur;        T.timings(iTrial,maskOnset) = T.timings(iTrial,imageOffset2);        T.timings(iTrial,maskOffset) = T.timings(iTrial,maskOnset) + P.maskDur;        T.timings(iTrial,retrocueOnset) = T.timings(iTrial,maskOffset)+ (P.postStimRange(1) + (P.postStimRange(2)-P.postStimRange(1)).*rand(1));         T.timings(iTrial,imageryOnset) = T.timings(iTrial,retrocueOnset) + P.retroCueDur;        T.timings(iTrial,confOnset) = T.timings(iTrial,imageryOnset) + P.imageryDur;    T.timings(iTrial,confOffset) = T.timings(iTrial,confOnset) + P.confDur;        T.timings(iTrial,probeOnset) = T.timings(iTrial,confOffset) + P.postConfDur;            %% Fixation point    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));    currTime = Screen('Flip', wPtr, T.timings(iTrial,trialOnset)-slack);    T.realtimings(iTrial,trialOnset) = currTime - T.startTime;        % Send trigger    triggerCount = triggerCount + 1;       triggers(triggerCount,:) = [P.triggerStart, T.realtimings(iTrial,trialOnset)];    if P.situation == 2 % MEG        BitsiBB.sendTrigger(P.triggerStart); %     end        % Fixation cue    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, cueTexture, [], CenterRect(fixRect,rect));    Screen('Flip',wPtr, T.timings(iTrial,trialOnset)+P.preCueDur-slack);        % Another fixation point        Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));    Screen('Flip', wPtr, T.timings(iTrial,trialOnset)+P.preCueDur+P.cueDur-slack);        %% Stimulus presentation    for iStim = 1:P.nStim                if iStim == 1            currStimOn = imageOnset1;            currStimOff = imageOffset1;        elseif iStim == 2            currStimOn = imageOnset2;            currStimOff = imageOffset2;        end                % Present stimuli        Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);        Screen('DrawTexture', wPtr, stim(P.trialMatrix(iTrial,iStim),1), [], CenterRect(stimRect,rect)); % fixation point?        Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));        currTime = Screen('Flip', wPtr, T.timings(iTrial,currStimOn)-slack);        T.realtimings(iTrial,currStimOn) = currTime - T.startTime;                % Send trigger        triggerCount = triggerCount + 1;        triggerCode = (iStim*100)+P.trialMatrix(iTrial,iStim); % 1st or 2nd stim, which stimulus identity        triggers(triggerCount,:) = [triggerCode, T.realtimings(iTrial,currStimOn)];        if P.situation == 2 % MEG            BitsiBB.sendTrigger(triggerCode);        end                Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);        Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));        currTime = Screen('Flip', wPtr, T.timings(iTrial,currStimOff)-slack);        T.realtimings(iTrial,currStimOff) = currTime - T.startTime;    end        %% Present the mask    % make the random mask    maskIdx = randi(2,[P.stimSizeInPix(1)+30,P.stimSizeInPix(2)+30]);    mask = zeros([size(maskIdx),3]);    mask(maskIdx == 1) = 0;     mask(maskIdx == 2) = 127; mask(:,:,2) = mask(:,:,1); mask(:,:,3) = mask(:,:,1);    mask = uint8(mask);        % make mask texture    maskTexture = Screen('MakeTexture',wPtr,mask);        % present it    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));        Screen('DrawTexture', wPtr, maskTexture, [], CenterRect(P.baseRect,rect));    currTime = Screen('Flip',wPtr,T.timings(iTrial,maskOnset)-slack);    T.realtiming(iTrial,maskOnset) = currTime - T.startTime;          % fixation in between    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));    currTime = Screen('Flip', wPtr, T.timings(iTrial,maskOffset)-slack);    T.realtimings(iTrial,maskOffset) = currTime - T.startTime;        %% Present retro-cue    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    %Screen('DrawTexture', wPtr, cueTexture, [], CenterRect(fixRect,rect)); % Draws cue    DrawFormattedText(wPtr, P.retroCueID{P.trialMatrix(iTrial,3)}, 'center', 'center', P.retroCueColour);    currTime = Screen('Flip', wPtr, T.timings(iTrial,retrocueOnset)-slack);    T.realtimings(iTrial,retrocueOnset) = currTime - T.startTime;        % Send trigger    triggerCount = triggerCount + 1;    triggerCode = P.triggerRetrocue+P.trialMatrix(iTrial,3);    triggers(triggerCount,:) = [triggerCode, T.realtimings(iTrial,retrocueOnset)];    if P.situation == 2 % MEG        BitsiBB.sendTrigger(triggerCode);    end    %% Imagery    Screen('FrameRect', wPtr, 0, CenterRectOnPointd(P.baseRect, xCenter, yCenter), 3);    Screen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));    currTime = Screen('Flip', wPtr, T.timings(iTrial,imageryOnset)-slack);    T.realtimings(iTrial,imageryOnset) = currTime - T.startTime;        % Send trigger    triggerCount = triggerCount + 1;    triggerCode = (P.trialMatrix(iTrial,3)+2)*100+P.trialMatrix(iTrial,P.trialMatrix(iTrial,3));    triggers(triggerCount,:) = [triggerCode, T.realtimings(iTrial,imageryOnset)];    if P.situation == 2 % MEG        BitsiBB.sendTrigger(triggerCode);    end                %% Vividness rating    % Show the screen    Reverse = P.trialMatrix(iTrial,4); % reverse scale or not?    if ~Reverse        message = sprintf('How vivid was your imagery? \n Not vivid \t \t \t \t \t Very vivid');    elseif Reverse        message = sprintf('How vivid was your imagery? \n Very vivid \t \t \t \t \t Not vivid');    end    DrawFormattedText(wPtr, message, 'center', P.midY-P.yOffset, [255 255 255], [], [], [], 1.5);     Screen('DrawTexture', wPtr, confTexture, [], CenterRect(confRect,rect)); % pre-draw confidence scale    Screen('DrawTexture', wPtr, sliderTexture, [], CenterRect(sliderRect,rect)); % pre-draw confidence line    lastFlip = Screen('Flip', wPtr,T.timings(iTrial,confOnset)-slack);    T.realtimings(iTrial,confOnset) = lastFlip - T.startTime;        startResponse = lastFlip;    T.trials(iTrial,2) = startResponse - T.startTime;        nextFlip = lastFlip + 1/P.frameHz; % update every frame    FlushEvents('KeyDown');        lateralMovement = 0;    prevLoc = 0;    firstKeyPress = true;    keyPress = false;    keyPressStart = 0;    keyPressKey = 0;    timeStamp = lastFlip;    B(iTrial,confStartTime) = NaN;    B(iTrial,confEndTime) = NaN;    B(iTrial,confReverse) = Reverse;        while nextFlip < (startResponse + P.confDur)        while timeStamp < nextFlip - slack;                        if P.situation == 0                                [keyIsDown, timeStamp, keyCode] = KbCheck(-3);                key = KbName(keyCode);                                if keyPress                    if keyIsDown                        if any(strcmp(keyPressKey, key));                            time = timeStamp - keyPressStart;                            if time>0 % prevent weird things happening if time becomes negative through clock inaccuracies                                dtLoc = 218*time^(2.13);                                switch keyPressKey                                    case P.leftKey                                        lateralMovement = prevLoc - dtLoc;                                    case P.rightKey                                        lateralMovement = prevLoc + dtLoc;                                end                            end                        else                            keyPress = false; % if none of the keys being pressed are the key that started the keypress, that ends the keypress                            B(iTrial,confEndTime) = timeStamp - startResponse; % note that matchEnd can be updated several times during the match interval - it's the last one that matters                        end                    else                        keyPress = false; % if no keys are being pressed, that ends the keypress                        B(iTrial,confEndTime) = timeStamp - startResponse;                    end                else                    if keyIsDown                        if ~iscell(key) % only start a keypress if there is only one key being pressed                            if any(strcmp(key, {P.leftKey, P.rightKey}))                                keyPress = true;                                keyPressKey = key;                                keyPressStart = timeStamp;                                prevLoc = lateralMovement;                                if firstKeyPress                                    firstKeyPress = false;                                    B(iTrial,confStartTime) = timeStamp - startResponse;                                end                            elseif strcmp(key, 'ESCAPE')                                save([P.dataPath, P.sessionName]); % save everything                                Screen('FillRect', wPtr, P.backgroundColour, rect);                                DrawFormattedText(wPtr, 'Experiment was aborted!', 'center', 'center', [255 255 255]);                                Screen('Flip',wPtr);                                WaitSecs(0.5);                                ShowCursor;                                Screen('CloseAll');                                disp(' ');                                disp('Experiment aborted by user!');                                disp(' ');                                                            end % exit on Escape press                        end                    end                end % end keypress                            elseif P.situation ~= 0                                timeout = 0.001;                [responseKey, timeStamp]= getResponse(BitsiBB, timeout, true);                                if keyPressKey == P.leftKey || keyPressKey == P.rightKey                                        time = timeStamp - keyPressStart;                    if time>0 % prevent weird things happening if time becomes negative through clock inaccuracies                                                dtLoc = 218*time^(2.13);                        switch keyPressKey                            case P.leftKey                                lateralMovement = prevLoc - dtLoc;                            case P.rightKey                                lateralMovement = prevLoc + dtLoc;                        end                    end                elseif keyPressKey == P.leftKeyOff || keyPressKey == P.rightKeyOff                    prevLoc = lateralMovement;                    B(iTrial,confEndTime) = timeStamp - startResponse;                    keyPressKey = 0;                end                                if responseKey ~= 0                    keyPressKey = responseKey;                    keyPressStart = timeStamp;                    prevLoc = lateralMovement;                    if firstKeyPress                        firstKeyPress = false;                        B(iTrial,confStartTime) = keyPressStart - startResponse;                    end                else                end            end        end                updatedX = round(P.midX+lateralMovement);        if updatedX < (P.midX+P.lineLengthPix/2) && updatedX > (P.midX-P.lineLengthPix/2) % if confidence is still on the bar            updatedSliderRect = [updatedX-P.sliderLengthPix/2 P.midY-P.sliderLengthPix/2 ...                updatedX+P.sliderLengthPix/2 P.midY+P.sliderLengthPix/2];        elseif updatedX > (P.midX+P.lineLengthPix/2) % if confidence is max            updatedSliderRect = [(P.midX+P.lineLengthPix/2-P.sliderLengthPix/2) P.midY-P.sliderLengthPix/2 ...                (P.midX+P.lineLengthPix/2+P.sliderLengthPix/2) P.midY+P.sliderLengthPix/2];            lateralMovement = P.lineLengthPix/2;        elseif updatedX < (P.midX-P.lineLengthPix/2) % if confidence is min            updatedSliderRect = [(P.midX-P.lineLengthPix/2-P.sliderLengthPix/2) P.midY-P.sliderLengthPix/2 ...                (P.midX-P.lineLengthPix/2+P.sliderLengthPix/2) P.midY+P.sliderLengthPix/2];            lateralMovement = -(P.lineLengthPix/2);        end                confContrast = max(0, 1 - max(0,(nextFlip - (startResponse + P.confDim)))/((startResponse + P.confDur) - (startResponse + P.confDim)));        DrawFormattedText(wPtr, message, 'center', P.midY-P.yOffset, [255 255 255], [], [], [], 1.5);        Screen('DrawTexture', wPtr, confTexture, [], CenterRect(confRect,rect), [], [], confContrast);        Screen('DrawTexture', wPtr, sliderTexture, [], updatedSliderRect, [], [], confContrast);        Screen('DrawingFinished', wPtr);        lastFlip = Screen('Flip', wPtr);        if abs(lastFlip - nextFlip) >= 1/P.frameHz, flipmisscount = flipmisscount + 1; end        nextFlip = lastFlip + 1/P.frameHz;    end        B(iTrial,responseConf) = round(lateralMovement);             %% Catch trials    % catch trial or not?    Catch = P.trialMatrix(iTrial,5);    if ~Catch        T.timings(iTrial,probeOffset) = T.timings(iTrial,confOffset); % do not present probe    elseif Catch                      % Present the probes        DrawFormattedText(wPtr, sprintf('Which did you imagine?'), 'center', P.midY+P.yOffset, [255 255 255], [], [], [], 1.5);        Screen('DrawTextures', wPtr, stim(P.trialMatrix(iTrial,6:9),1), [], ProbLoc');        currTime = Screen('Flip', wPtr, T.timings(iTrial,probeOnset)-slack);        T.realtimings(iTrial,probeOnset) = currTime - T.startTime;                % Send trigger        triggerCount = triggerCount + 1;        triggerCode = P.triggerProbe;        triggers(triggerCount,:) = [triggerCode, T.realtimings(iTrial,probeOnset)];        if P.situation == 2 % MEG            BitsiBB.sendTrigger(triggerCode);        end                % Behavioural response                % clear key presses        if P.situation == 0            keyPressed = 0; % If previously key was pressed        elseif P.situation ~= 0            BitsiBB.clearResponses(); % Clear Button Box responses            keyPressed = 0;        end                % wait for the response        while GetSecs < (T.timings(iTrial,probeOnset)+ P.responseDur - slack) && ~keyPressed                        if P.situation == 0                                [~, keyTime, keyCode] = KbCheck(-3);                key = KbName(keyCode);                                if ~iscell(key) % only start a keypress if there is only one key being pressed                    if any(strcmp(key, P.keys))                                                response = find(strcmp(key,P.keys));                                                 % fill in B                        B(iTrial,trialResponse) = response;                        B(iTrial,trialRT) = keyTime-T.realtimings(iTrial,probeOnset)-T.startTime;                                                % fill in timings                        T.timings(iTrial,probeOffset) = keyTime;                                                keyPressed = true;                                                % Send trigger                        triggerCount = triggerCount + 1;                        triggerCode = P.triggerResponse+response;                        triggers(triggerCount,:) = [triggerCode, keyTime-T.startTime];                                            elseif strcmp(key, 'ESCAPE')                        Screen('FillRect', wPtr, P.backgroundColour, rect);                        DrawFormattedText(wPtr, 'Experiment was aborted!', 'center', 'center', [255 255 255]);                        Screen('Flip',wPtr);                        WaitSecs(0.5);                        ShowCursor;                        if P.situation ~= 0 && ~isempty(P.calibrationFile)                            Screen('LoadCLUT', wPtr, hardwareCLUT);                        end                        Screen('CloseAll');                        disp(' ');                        disp('Experiment aborted by user!');                        disp(' ');                        save([P.dataPath, P.sessionName]); % save everything                    end                end                                WaitSecs(0.001);                            elseif P.situation ~= 0                                timeout = .001;                [key, keyTime] = BitsiBB.getResponse(timeout, 'true');                if ismember(key,P.keys)                                        response = find(ismember(key,P.keys));                                        B(iTrial,trialResponse) = response;                    B(iTrial,trialRT) = keyTime-T.realtimings(iTrial,probeOnset)-T.startTime;                                        T.timings(iTrial,probeOffset) = keyTime;                                        keyPressed = true;                                        % Send trigger                    triggerCount = triggerCount + 1;                    triggerCode = P.triggerResponse+response;                    triggers(triggerCount,:) = [triggerCode, keyTime-T.startTime];                    if P.situation == 2 % MEG                        BitsiBB.sendTrigger(triggerCode);                    end                                    elseif strcmp(key, 'ESCAPE')                    Screen('FillRect', wPtr, P.backgroundColour, rect);                    DrawFormattedText(wPtr, 'Experiment was aborted!', 'center', 'center', [255 255 255]);                    Screen('Flip',wPtr);                    WaitSecs(0.5);                    ShowCursor;                    if P.situation ~= 0 && ~isempty(P.calibrationFile)                        Screen('LoadCLUT', wPtr, hardwareCLUT);                    end                    Screen('CloseAll');                    disp(' ');                    disp('Experiment aborted by user!');                    disp(' ');                    save([P.dataPath, P.sessionName]); % save everything                                    end                WaitSecs(0.001);                            end        end                if B(iTrial,trialResponse)==0; % if not in time with key press            T.timings(iTrial,probeOffset) = T.timings(iTrial,probeOnset)+P.responseDur;        end    end    %% Trial end    T.trialEnd(iTrial) = currTime - T.startTime;        % Inter-trial-interval    Screen('FillRect', wPtr, P.backgroundColour);    currTime = Screen('Flip',wPtr,T.timings(iTrial,probeOffset)-slack);    T.realtimings(iTrial,probeOffset) = currTime - T.startTime;    end % end TrialScreen('DrawTexture', wPtr, fixTexture, [], CenterRect(fixRect,rect));currTime = Screen('Flip', wPtr);while (GetSecs - currTime < P.fix - slack)    WaitSecs(0.001);end%% Last flipT.endTime = Screen('Flip', wPtr);Screen('CloseAll');ShowCursor;disp('Experiment done');disp(['Experiment duration: ' num2str([T.endTime]) ' seconds']);%% Clean upif P.situation == 1 || P.situation == 2 % BEH or MEG    close(BitsiBB);    delete(instrfind);elseif P.situation == 3 % MRI    close(BitsiScanner);    close(BitsiBB);    delete(instrfind);endif P.situation ~= 0 && ~isempty(P.calibrationFile)    Screen('LoadCLUT', wPtr, hardwareCLUT);end% clean up triggerstriggers((triggers(:,1)==0),:) = [];%% Experiment durationexptDuration = T.endTime - T.startTime;exptDurMin = floor(exptDuration/60);exptDurSec = ceil(mod(exptDuration, 60));fprintf('Cycling lasted %d minutes, %d seconds\n', exptDurMin, exptDurSec);fprintf(['\nBy my own estimate, Screen(''Flip'') missed the requested screen retrace ', num2str(flipmisscount), ' times\n']);%% Save workspacesave([P.dataPath, P.sessionName]); % save everything