function locTask(subject, session, situation, emulate)%   trainTask(Subj, Sess, Emul, Situation)%   %   An alternating checkerboard is presented in an annulus mask. %   Participants have to press a button when the checkerboard is dimmed. %   Calls the function Training with the desired set of parameters. %   Arguments in:%%   subject     =   String with subject ID  %   session     =   Session number%   situation   =   0 = DCCN desktop%                   1 = Trio scanner%                   2 = Behavioural Lab 1 (CRT monitor)%                   3 = Behavioural Lab 2 (linked screen)%                   4 = Any other computer %   emulate     =   0 = Triggered by scanner%                   1 = Trigger by keypress%%   If no input arguments are given, the code will assume it needs to run%   in demonstration mode, on a DCCN desktop system. %   If Situation and Emulate are not entered, the default assumption is %   that you're running the code for the scanner.%%   Written by SEB in June 2012if nargin == 0    subject = 'demo';    emulate = 1;    session = 1;        situation = 0;elseif nargin < 3        situation = 1; % Scanner    emulate = 0;end% Create the mandatory folders if not already present if ~exist([cd filesep 'data'], 'dir')    mkdir('data');endaddpath('functions');Parameters = struct;    % Initialize the parameters variable%% Various parametersParameters.theDate = datestr(now, 'yyyymmdd');[Parameters.session Parameters.sessionName] = currentSession([Parameters.theDate '_localizer_' subject],session); % Determine current sessionif strcmp(Parameters.session,'abort'), error('No response given, exiting.'); end %% Screen parametersParameters.situation                = situation;	[frameHz,pixPerDeg,calibrationFile] = getMonitorInfo(Parameters.situation);Parameters.screen       = 0;	% Main screenParameters.resolution   = Screen('Rect', Parameters.screen);	%[50 50 1316 718]; % 	Parameters.frameHz          = frameHz;Parameters.pixPerDeg        = pixPerDeg;Parameters.calibrationFile  = calibrationFile;%% Gamma-corrected Colour Look-Up TableParameters.meanLum      = 0.5;Parameters.contrast     = 1;Parameters.stimContrast = 1;Parameters.amp          = Parameters.meanLum * Parameters.contrast;% Load inverse gamma table and screen dacsize from calibration file							load(Parameters.calibrationFile, 'gamInverse', 'dacsize');	nColours          = 255;	% Number of gray levels to use in newCLUT, should be unevennewCLUT           = zeros(256,3);	% Color Look-Up Table of 256 RGB values, RANGE 0-1grayscaleGradient = linspace(Parameters.meanLum-Parameters.amp, Parameters.meanLum+Parameters.amp, nColours)';	% Get indices of black, background and white colours in newCLUT, subtract 1 for range 0-255 blackIdx      = find(grayscaleGradient==0) -1;backgroundIdx = find(grayscaleGradient==.5) -1;	whiteIdx      = find(grayscaleGradient==1) -1;% Fill in newCLUTnewCLUT(1:nColours,:) = repmat(grayscaleGradient, [1 3]);newCLUT(256,1:3)      = 1;newCLUT               = round(map2map(newCLUT,gamInverse));%% CLUT parametersParameters.foreground   = blackIdx;  % Foreground colourParameters.foreground2  = whiteIdx;  % Foreground colourParameters.background   = backgroundIdx;	% Background colourParameters.CLUT = newCLUT;Parameters.meanColourIdx = ceil((nColours)/2) -1; % Mean colour number (0-255) of stimulus (used to index rows 1:256 in newCLUT)Parameters.ampColourIdx  = floor(Parameters.stimContrast*(nColours-1)); % Amplitude of colour variation for stimulusif (Parameters.meanColourIdx ~= Parameters.background)    error('background ColourIdx and mean ColourIdx are not the same')end%% Scanner parametersParameters.TR        = 1.8;	% Seconds per volumeParameters.fix       = 3;   % Fixation volumesParameters.dummies   = 0;	% Dummy volumesParameters.overrun   = 0;	% Dummy volumes at end%% Stimulus parametersParameters.stimSizeInDegree = 13;Parameters.stimSizeInPixels = round([Parameters.stimSizeInDegree*Parameters.pixPerDeg Parameters.stimSizeInDegree*Parameters.pixPerDeg]);	% Width, height of stimulusParameters.stimLoc          = [round((Parameters.resolution(3)-Parameters.stimSizeInPixels(1))/2), round((Parameters.resolution(4)-Parameters.stimSizeInPixels(2))/2)];Parameters.stimRect         = [Parameters.stimLoc Parameters.stimLoc+Parameters.stimSizeInPixels];Parameters.stim1            = RadialCheckerBoard([Parameters.stimSizeInPixels(1)/2 0], [-180 180], [7 5]);mask                        = zeros(Parameters.stimSizeInPixels(1), Parameters.stimSizeInPixels(2)) - 1;	% Mask to invert contrastParameters.stim2            = Parameters.stim1.*mask;%% Experiment parametersParameters.nPerBlock        = 108;   % Stimuli per block Parameters.nPerRun          = 13;    % Number of blocks per runParameters.probOfEvent      = 0.02;  % Probability of a target eventParameters.eventDuration    = 0.1;  % Duration of a target eventParameters.volsPerBlock     = 6;Parameters.nVolsPerRun      = Parameters.volsPerBlock * Parameters.nPerRun + Parameters.dummies + Parameters.overrun + Parameters.fix*2; disp(['Volumes = ' num2str(Parameters.nVolsPerRun)]); disp(' ');%% Time parametersParameters.waitDur      = 324/60; % 330 framesParameters.stimDur      = 6/60; % 6 framesParameters.trialDur     = 2*Parameters.stimDur;Parameters.blockDur     = Parameters.nPerBlock * Parameters.stimDur;Parameters.blockSwitch  = Parameters.blockDur * (1:Parameters.nPerRun) + Parameters.fix * Parameters.TR;%% Mask parametersParameters.startLinearDecayInDegree = .5;	% Linear decay starts .5 degree away from edgeParameters.startLinearDecayInPixels = round(Parameters.startLinearDecayInDegree*Parameters.pixPerDeg);Parameters.maskThresh               = round(Parameters.stimSizeInPixels(2)/4);	% Size of annulusParameters.mask                     = makeLinearMaskCircleAnn(Parameters.stimSizeInPixels(2),Parameters.stimSizeInPixels(1), [], Parameters.startLinearDecayInPixels, Parameters.maskThresh); %% Fixation parametersParameters.fixDiameter          = ceil(0.5*Parameters.pixPerDeg);Parameters.fixRect              = [0 0 Parameters.fixDiameter Parameters.fixDiameter];Parameters.fixBackground        = zeros(Parameters.fixDiameter,Parameters.fixDiameter,2)*0;Parameters.fixCenterDiameter    = floor(Parameters.fixDiameter/3);%% Text parametersParameters.fontSize 	= round(12*Parameters.pixPerDeg/40);Parameters.fontName     = 'Verdana';%% Run the experimentLocalizer(Parameters, emulate);end	